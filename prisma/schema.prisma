generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String              @id @default(cuid())
  email                String              @unique
  password             String
  name                 String?
  avatar               String?
  bio                  String?
  birthDate            DateTime?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  groupDeletionVotes   GroupDeletionVote[]
  sentGroupInvitations GroupInvitation[]   @relation("SentGroupInvitations")
  groupMemberships     GroupMember[]
  groupMessages        GroupMessage[]
  sentInvitations      PartnerInvitation[] @relation("SentInvitations")
  receivedInvitations  PartnerInvitation[] @relation("ReceivedInvitations")
  wishlists            WishList[]
  children             Child[]             @relation("ParentChild")
  editableWishlists    WishList[]          @relation("WishListEditors")
  giverAssignments     SecretSantaAssignment[] @relation("GiverAssignments")
  receiverAssignments  SecretSantaAssignment[] @relation("ReceiverAssignments")
}

model WishList {
  id          String         @id @default(cuid())
  title       String
  description String?
  userId      String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  publicId    String?        @unique @default(cuid())
  childId     String?
  categories  Category[]
  child       Child?         @relation(fields: [childId], references: [id])
  user        User?          @relation(fields: [userId], references: [id])
  items       WishlistItem[]
  editors     User[]         @relation("WishListEditors")

  @@index([userId])
  @@index([childId])
}

model Category {
  id          String         @id @default(cuid())
  name        String
  order       Int
  wishlistId  String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  description String?
  wishlist    WishList       @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  items       WishlistItem[]

  @@index([wishlistId])
}

model WishlistItem {
  id           String    @id @default(cuid())
  name         String
  url          String?
  comment      String?
  order        Int
  wishlistId   String
  categoryId   String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  isReserved   Boolean   @default(false)
  reserverName String?
  category     Category? @relation(fields: [categoryId], references: [id])
  wishlist     WishList  @relation(fields: [wishlistId], references: [id], onDelete: Cascade)

  @@index([wishlistId])
  @@index([categoryId])
}

model Child {
  id        String     @id @default(cuid())
  firstName String
  birthDate DateTime
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  wishlists WishList[]
  parents   User[]     @relation("ParentChild")
}

model PartnerInvitation {
  id         String   @id @default(cuid())
  fromUserId String
  toUserId   String?
  email      String
  status     String   @default("PENDING")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  fromUser   User     @relation("SentInvitations", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUser     User?    @relation("ReceivedInvitations", fields: [toUserId], references: [id])

  @@index([fromUserId])
  @@index([toUserId])
  @@index([email])
}

model Group {
  id            String              @id @default(cuid())
  name          String
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  deletionVotes GroupDeletionVote[]
  invitations   GroupInvitation[]
  members       GroupMember[]
  messages      GroupMessage[]
  secretSantas  SecretSanta[]
  events        Event[]

  @@unique([name])
}

model Event {
  id            String   @id @default(cuid())
  name          String
  groupId       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  hasLocation   Boolean  @default(false)
  hasCalendar   Boolean  @default(false)
  hasMenus      Boolean  @default(false)
  hasShopping   Boolean  @default(false)
  hasActivities Boolean  @default(false)
  hasPhotos     Boolean  @default(false)
  hasAccounts   Boolean  @default(false)
  group         Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@index([groupId])
}

model GroupMember {
  id       String   @id @default(cuid())
  userId   String
  groupId  String
  joinedAt DateTime @default(now())
  role     String   @default("MEMBER")
  group    Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
  @@index([groupId])
  @@index([userId])
}

model GroupMessage {
  id        String   @id @default(cuid())
  content   String
  userId    String
  groupId   String
  createdAt DateTime @default(now())
  isDeleted Boolean  @default(false)
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@index([groupId])
  @@index([userId])
}

model GroupInvitation {
  id         String   @id @default(cuid())
  groupId    String
  fromUserId String
  email      String?
  token      String   @unique
  status     String   @default("PENDING")
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  fromUser   User     @relation("SentGroupInvitations", fields: [fromUserId], references: [id])
  group      Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@index([groupId])
  @@index([token])
  @@index([email])
  @@index([fromUserId])
}

model GroupDeletionVote {
  id        String   @id @default(cuid())
  userId    String
  groupId   String
  createdAt DateTime @default(now())
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@unique([groupId, userId])
  @@index([groupId])
  @@index([userId])
}

model SecretSanta {
  id        String                 @id @default(cuid())
  year      Int
  groupId   String
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
  group     Group                 @relation(fields: [groupId], references: [id], onDelete: Cascade)
  assignments SecretSantaAssignment[]

  @@unique([groupId, year])
  @@index([groupId])
}

model SecretSantaAssignment {
  id            String      @id @default(cuid())
  secretSantaId String
  giverId       String
  receiverId    String
  createdAt     DateTime    @default(now())
  secretSanta   SecretSanta @relation(fields: [secretSantaId], references: [id], onDelete: Cascade)
  giver         User        @relation("GiverAssignments", fields: [giverId], references: [id])
  receiver      User        @relation("ReceiverAssignments", fields: [receiverId], references: [id])

  @@unique([secretSantaId, giverId])
  @@unique([secretSantaId, receiverId])
  @@index([secretSantaId])
  @@index([giverId])
  @@index([receiverId])
}
