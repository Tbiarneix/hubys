generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String
  firstName     String
  lastName      String?
  birthDate     DateTime?
  bio           String?
  avatar        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  groups        GroupMember[]
  events        EventParticipant[]
  wishlistItems WishlistItem[]
  messages      Message[]
  children      Child[]
  partner       User?     @relation("Partners", fields: [partnerId], references: [id])
  partnerId     String?
  partnerOf     User[]    @relation("Partners")
}

model Group {
  id          String    @id @default(uuid())
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  members     GroupMember[]
  events      Event[]
  messages    Message[]
}

model GroupMember {
  id        String   @id @default(uuid())
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  joinedAt  DateTime @default(now())

  @@unique([groupId, userId])
}

model Event {
  id              String    @id @default(uuid())
  name            String
  startDate       DateTime
  endDate         DateTime
  isVacation      Boolean   @default(false)
  group           Group?    @relation(fields: [groupId], references: [id])
  groupId         String?
  participants    EventParticipant[]
  activities      Activity[]
  meals           Meal[]
  shoppingItems   ShoppingItem[]
  photos          Photo[]
  expenses        Expense[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model EventParticipant {
  id        String   @id @default(uuid())
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  presence  Json     // Stocke les pr√©sences midi/soir pour chaque jour

  @@unique([eventId, userId])
}

model Child {
  id        String   @id @default(uuid())
  name      String
  birthDate DateTime
  parent    User     @relation(fields: [parentId], references: [id])
  parentId  String
}

model WishlistItem {
  id          String   @id @default(uuid())
  name        String
  link        String?
  category    String?
  isReserved  Boolean  @default(false)
  reservedBy  String?
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  order       Int
  createdAt   DateTime @default(now())
}

model Message {
  id        String   @id @default(uuid())
  content   String
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model Activity {
  id          String   @id @default(uuid())
  title       String
  link        String?
  location    String?
  priceAdult  Float?
  priceChild  Float?
  priceBaby   Float?
  date        DateTime
  event       Event    @relation(fields: [eventId], references: [id])
  eventId     String
}

model Meal {
  id          String   @id @default(uuid())
  title       String
  recipeLink  String?
  date        DateTime
  isLunch     Boolean
  event       Event    @relation(fields: [eventId], references: [id])
  eventId     String
  ingredients ShoppingItem[]
}

model ShoppingItem {
  id        String   @id @default(uuid())
  name      String
  quantity  String?
  category  String?
  meal      Meal?    @relation(fields: [mealId], references: [id])
  mealId    String?
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
}

model Photo {
  id        String   @id @default(uuid())
  url       String
  date      DateTime
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
}

model Expense {
  id          String   @id @default(uuid())
  description String
  amount      Float
  paidBy      String   // ID de l'utilisateur
  sharedWith  String[] // Liste des IDs des utilisateurs
  event       Event    @relation(fields: [eventId], references: [id])
  eventId     String
  createdAt   DateTime @default(now())
}