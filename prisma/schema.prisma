// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String              @id @default(cuid())
  email                 String              @unique
  password              String
  name                  String?
  avatar                String?
  bio                   String?
  birthDate             DateTime?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  wishlists             WishList[]
  editableWishlists     WishList[]         @relation("WishListEditors")
  children              Child[]             @relation("ParentChild")
  sentInvitations       PartnerInvitation[] @relation("SentInvitations")
  receivedInvitations   PartnerInvitation[] @relation("ReceivedInvitations")
}

model WishList {
  id          String    @id @default(cuid())
  publicId    String?   @unique @default(cuid())
  title       String
  description String?
  userId      String?
  user        User?     @relation(fields: [userId], references: [id])
  childId     String?
  child       Child?    @relation(fields: [childId], references: [id])
  editors     User[]    @relation("WishListEditors")
  categories  Category[]
  items       WishlistItem[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
  @@index([childId])
}

model Category {
  id          String         @id @default(cuid())
  name        String
  description String?
  order       Int
  wishlistId  String
  wishlist    WishList      @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  items       WishlistItem[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([wishlistId])
}

model WishlistItem {
  id          String    @id @default(cuid())
  name        String
  url         String?
  comment     String?
  order       Int
  wishlistId  String
  wishlist    WishList  @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])
  isReserved  Boolean   @default(false)
  reserverName String?  // Nom de la personne qui r√©serve
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([wishlistId])
  @@index([categoryId])
}

model Child {
  id          String     @id @default(cuid())
  firstName   String
  birthDate   DateTime
  parents     User[]     @relation("ParentChild")
  wishlists   WishList[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model PartnerInvitation {
  id         String   @id @default(cuid())
  fromUserId String
  fromUser   User     @relation("SentInvitations", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUserId   String?
  toUser     User?    @relation("ReceivedInvitations", fields: [toUserId], references: [id])
  email      String
  status     String   @default("PENDING") // PENDING, ACCEPTED, REJECTED
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([fromUserId])
  @@index([toUserId])
  @@index([email])
}
