generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String              @id @default(cuid())
  email                String              @unique
  password             String
  name                 String?
  avatar               String?
  bio                  String?
  birthDate            DateTime?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  groupDeletionVotes   GroupDeletionVote[]
  sentGroupInvitations GroupInvitation[]   @relation("SentGroupInvitations")
  partneredMembers     GroupMember[]       @relation("GroupMemberPartner")
  groupMemberships     GroupMember[]
  groupMessages        GroupMessage[]
  locationVotes        LocationVote[]
  sentInvitations      PartnerInvitation[] @relation("SentInvitations")
  receivedInvitations  PartnerInvitation[] @relation("ReceivedInvitations")
  recipes              Recipe[]
  recipeFavorites      RecipeFavorite[]
  wishlists            WishList[]
  children             Child[]             @relation("ParentChild")
  editableWishlists    WishList[]          @relation("WishListEditors")
  giverAssignments     SecretSantaAssignment[] @relation("GiverAssignments")
  receiverAssignments  SecretSantaAssignment[] @relation("ReceiverAssignments")
  addedMenus           Menu[]              @relation("MenuCreator")
  ingredients          Ingredient[]
  todoItems             TodoItem[]

  @@index([email])
}

model WishList {
  id          String         @id @default(cuid())
  title       String
  description String?
  userId      String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  publicId    String?        @unique @default(cuid())
  childId     String?
  categories  Category[]
  child       Child?         @relation(fields: [childId], references: [id])
  user        User?          @relation(fields: [userId], references: [id])
  items       WishlistItem[]
  editors     User[]         @relation("WishListEditors")

  @@index([userId])
  @@index([childId])
}

model Category {
  id          String         @id @default(cuid())
  name        String
  order       Int
  wishlistId  String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  description String?
  wishlist    WishList       @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  items       WishlistItem[]

  @@index([wishlistId])
}

model WishlistItem {
  id           String    @id @default(cuid())
  name         String
  url          String?
  comment      String?
  order        Int
  wishlistId   String
  categoryId   String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  isReserved   Boolean   @default(false)
  reserverName String?
  category     Category? @relation(fields: [categoryId], references: [id])
  wishlist     WishList  @relation(fields: [wishlistId], references: [id], onDelete: Cascade)

  @@index([wishlistId])
  @@index([categoryId])
}

model Child {
  id        String        @id @default(cuid())
  firstName String
  birthDate DateTime
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  wishlists WishList[]
  memberOf  GroupMember[] @relation("GroupMemberChildren")
  parents   User[]        @relation("ParentChild")
}

model PartnerInvitation {
  id         String   @id @default(cuid())
  fromUserId String
  toUserId   String?
  email      String
  status     String   @default("PENDING")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  fromUser   User     @relation("SentInvitations", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUser     User?    @relation("ReceivedInvitations", fields: [toUserId], references: [id])

  @@index([fromUserId])
  @@index([toUserId])
  @@index([email])
}

model Group {
  id              String              @id @default(cuid())
  name            String              @unique
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  showEvents      Boolean             @default(true)
  showSecretSanta Boolean             @default(true)
  showRecipes     Boolean             @default(true)
  showCalendar    Boolean             @default(true)
  events          Event[]
  deletionVotes   GroupDeletionVote[]
  invitations     GroupInvitation[]
  members         GroupMember[]
  messages        GroupMessage[]
  recipes         Recipe[]
  secretSantas    SecretSanta[]

}

model Event {
  id            String             @id @default(cuid())
  name          String
  groupId       String
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  startDate     DateTime
  endDate       DateTime
  hasLocation   Boolean            @default(false)
  hasCalendar   Boolean            @default(false)
  hasMenus      Boolean            @default(false)
  hasTodoList   Boolean            @default(false)
  hasActivities Boolean            @default(false)
  hasPhotos     Boolean            @default(false)
  hasAccounts   Boolean            @default(false)
  adultShare    Float              @default(1)
  childShare    Float              @default(0.5)
  group         Group              @relation(fields: [groupId], references: [id], onDelete: Cascade)
  locations     Location[]
  menus         Menu[]
  subgroups     Subgroup[]
  presences     SubgroupPresence[]
  shoppingList  ShoppingList?
  todoItems     TodoItem[]         @relation("EventTodoItems")

  @@index([groupId])
}

model Location {
  id        String         @id @default(cuid())
  eventId   String
  url       String
  amount    Float
  title     String
  image     String
  createdAt DateTime       @default(now())
  createdBy String
  event     Event          @relation(fields: [eventId], references: [id], onDelete: Cascade)
  votes     LocationVote[]
}

model LocationVote {
  id         String   @id @default(cuid())
  locationId String
  userId     String
  value      Int      @default(0)
  createdAt  DateTime @default(now())
  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([locationId, userId])
}

model GroupMember {
  id        String   @id @default(cuid())
  userId    String
  groupId   String
  joinedAt  DateTime @default(now())
  role      String   @default("MEMBER")
  partnerId String?
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  partner   User?    @relation("GroupMemberPartner", fields: [partnerId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  children  Child[]  @relation("GroupMemberChildren")

  @@unique([groupId, userId])
  @@index([groupId])
  @@index([userId])
  @@index([partnerId])
}

model GroupMessage {
  id        String   @id @default(cuid())
  content   String
  userId    String
  groupId   String
  createdAt DateTime @default(now())
  isDeleted Boolean  @default(false)
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@index([groupId])
  @@index([userId])
}

model GroupInvitation {
  id         String   @id @default(cuid())
  groupId    String
  fromUserId String
  email      String?
  token      String   @unique
  status     String   @default("PENDING")
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  fromUser   User     @relation("SentGroupInvitations", fields: [fromUserId], references: [id])
  group      Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@index([groupId])
  @@index([token])
  @@index([email])
  @@index([fromUserId])
}

model GroupDeletionVote {
  id        String   @id @default(cuid())
  userId    String
  groupId   String
  createdAt DateTime @default(now())
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@unique([groupId, userId])
  @@index([groupId])
  @@index([userId])
}

model SecretSanta {
  id          String                  @id @default(cuid())
  year        Int
  groupId     String
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
  group       Group                   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  assignments SecretSantaAssignment[]

  @@unique([groupId, year])
  @@index([groupId])
}

model SecretSantaAssignment {
  id            String      @id @default(cuid())
  secretSantaId String
  giverId       String
  receiverId    String
  createdAt     DateTime    @default(now())
  giver         User        @relation("GiverAssignments", fields: [giverId], references: [id])
  receiver      User        @relation("ReceiverAssignments", fields: [receiverId], references: [id])
  secretSanta   SecretSanta @relation(fields: [secretSantaId], references: [id], onDelete: Cascade)

  @@unique([secretSantaId, giverId])
  @@unique([secretSantaId, receiverId])
  @@index([secretSantaId])
  @@index([giverId])
  @@index([receiverId])
}

model Subgroup {
  id             String             @id @default(cuid())
  eventId        String
  adults         String[]
  children       String[]
  activeAdults   String[]
  activeChildren String[]
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  event          Event              @relation(fields: [eventId], references: [id], onDelete: Cascade)
  presences      SubgroupPresence[]

  @@index([eventId])
}

model SubgroupPresence {
  id          String   @id @default(cuid())
  date        DateTime
  lunch       Boolean  @default(false)
  dinner      Boolean  @default(false)
  lunchNumber Int      @default(0)
  dinnerNumber Int     @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  subgroupId  String
  eventId     String
  subgroup    Subgroup @relation(fields: [subgroupId], references: [id], onDelete: Cascade)
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([subgroupId])
  @@index([eventId])
}

model RecipeFavorite {
  id        String   @id @default(cuid())
  userId    String
  recipeId  String
  createdAt DateTime @default(now())
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, recipeId])
  @@index([userId])
  @@index([recipeId])
}

model Recipe {
  id          String           @id @default(cuid())
  name        String
  url         String?
  description String?
  servings    Int
  steps       String[]
  groupId     String
  authorId    String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  category    RecipeCategory   @default(OTHER)
  ingredients Ingredient[]
  menus       Menu[]
  author      User             @relation(fields: [authorId], references: [id])
  group       Group            @relation(fields: [groupId], references: [id], onDelete: Cascade)
  favorites   RecipeFavorite[]

  @@index([groupId])
  @@index([authorId])
}

model Ingredient {
  id        String         @id @default(cuid())
  name      String
  quantity  Float
  unit      Unit?
  type      IngredientType @default(OTHER)
  recipeId  String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  userId    String
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, recipeId])
  @@index([userId])
  @@index([recipeId])
}

model Menu {
  id             String          @id @default(cuid())
  name            String
  date            DateTime
  type            String
  numberOfPeople  Int
  eventId         String
  recipeId        String?
  url             String?
  userId          String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  event           Event           @relation(fields: [eventId], references: [id], onDelete: Cascade)
  recipe          Recipe?         @relation(fields: [recipeId], references: [id])
  user            User            @relation("MenuCreator", fields: [userId], references: [id])
  shoppingItems   ShoppingItem[]

  @@index([eventId])
  @@index([recipeId])
  @@index([userId])
}

model ShoppingList {
  id          String         @id @default(cuid())
  eventId     String         @unique
  name        String         @default("Liste de courses")
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  event       Event          @relation(fields: [eventId], references: [id], onDelete: Cascade)
  items       ShoppingItem[]

  @@index([eventId])
}

model ShoppingItem {
  id             String         @id @default(cuid())
  menuId         String?
  shoppingListId String?
  name           String
  quantity       Float?
  unit           String?
  type           IngredientType @default(OTHER)
  checked        Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  menu           Menu?          @relation(fields: [menuId], references: [id], onDelete: Cascade)
  shoppingList   ShoppingList?  @relation(fields: [shoppingListId], references: [id], onDelete: Cascade)

  @@index([menuId])
  @@index([shoppingListId])
}

model TodoItem {
  id            String    @id @default(cuid())
  title         String
  completed     Boolean   @default(false)
  assignedToId  String?
  eventId       String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  event         Event     @relation("EventTodoItems", fields: [eventId], references: [id], onDelete: Cascade)
  assignedTo    User?     @relation(fields: [assignedToId], references: [id])

  @@index([eventId])
  @@index([assignedToId])
}

enum Unit {
  NONE
  GRAM
  KILOGRAM
  MILLILITER
  CENTILITER
  LITER
  SPOON
  BUNCH
  PACK
}

enum IngredientType {
  VEGETABLE
  FRUIT
  MEAT
  FISH
  DAIRY
  GROCERY
  BAKERY
  BEVERAGE
  CONDIMENT
  OTHER
}

enum RecipeCategory {
  STARTER
  MAIN
  DESSERT
  SIDE
  BREAKFAST
  SNACK
  DRINK
  OTHER
}
